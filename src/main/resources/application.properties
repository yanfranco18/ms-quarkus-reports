quarkus.http.port=8083
quarkus.application.name=reports-service
# Configures the URL for the named "account-service" REST client
quarkus.rest-client."account-service".url=http://localhost:8081
# Configura la URL para el cliente REST del "transactionsService"
quarkus.rest-client."transactionsService".url=http://localhost:8082
# Configuración del REST Client para la comunicación inter-microservicios
quarkus.rest-client."customer-service".url=http://localhost:8080
quarkus.rest-client."customer-service".read-timeout=5000
quarkus.smallrye-openapi.path=/openapi
quarkus.swagger-ui.path=/swagger-ui
quarkus.http.redirect-to-dev-ui=true

# ====================================================================
# CONFIGURACIÓN GENERAL DE TIMEOUTS (Servicio Interno)
# ====================================================================

# Timeout para la nueva orquestación de resumen consolidado (2.5 segundos)
reports-service.orchestration-summary.ms=2500

# Timeout estándar para consultas rápidas (e.g., getBalances, getTransactions)
reports-service.quick-query.ms=1500

# Timeout para reportes que consumen consultas pesadas (e.g., Commissions)
reports-service.heavy-report.ms=4000

# Timeout para la orquestación analítica pesada (e.g., SPD)
reports-service.analytic-orchestration.ms=6000

# ====================================================================
# CONFIGURACIÓN DE CIRCUIT BREAKER (Común para todos los métodos internos)
# ====================================================================
reports-service.cb.request-volume=10
reports-service.cb.failure-ratio=0.6
reports-service.cb.delay=5000
reports-service.cb.success-threshold=3

# ====================================================================
# CONFIGURACIÓN DE RETRY PARA CLIENTES REST
# ====================================================================

# Número de reintentos
reports-service.retry.max-retries=3
# Intervalo de espera entre reintentos (300ms)
reports-service.retry.delay.ms=300
# Lista de excepciones que deben disparar el reintento
reports-service.retry.retry-on-exceptions=java.io.IOException, jakarta.ws.rs.ProcessingException, java.net.ConnectException


# ====================================================================
# A. AccountServiceRestClient (RETRY)
# ====================================================================

# 1. getAccountsByCustomer
com.bancario.reports.client.AccountServiceRestClient/getAccountsByCustomer/Retry/maxRetries=${reports-service.retry.max-retries}
com.bancario.reports.client.AccountServiceRestClient/getAccountsByCustomer/Retry/delay=${reports-service.retry.delay.ms}
com.bancario.reports.client.AccountServiceRestClient/getAccountsByCustomer/Retry/retryOn=${reports-service.retry.retry-on-exceptions}

# 2. getDailyBalancesByCustomer
com.bancario.reports.client.AccountServiceRestClient/getDailyBalancesByCustomer/Retry/maxRetries=${reports-service.retry.max-retries}
com.bancario.reports.client.AccountServiceRestClient/getDailyBalancesByCustomer/Retry/delay=${reports-service.retry.delay.ms}
com.bancario.reports.client.AccountServiceRestClient/getDailyBalancesByCustomer/Retry/retryOn=${reports-service.retry.retry-on-exceptions}


# ====================================================================
# B. TransactionServiceRestClient (RETRY)
# ====================================================================

# 1. getTransactionsByAccountId
com.bancario.reports.client.TransactionServiceRestClient/getTransactionsByAccountId/Retry/maxRetries=${reports-service.retry.max-retries}
com.bancario.reports.client.TransactionServiceRestClient/getTransactionsByAccountId/Retry/delay=${reports-service.retry.delay.ms}
com.bancario.reports.client.TransactionServiceRestClient/getTransactionsByAccountId/Retry/retryOn=${reports-service.retry.retry-on-exceptions}

# 2. getCommissionsReportData
com.bancario.reports.client.TransactionServiceRestClient/getCommissionsReportData/Retry/maxRetries=${reports-service.retry.max-retries}
com.bancario.reports.client.TransactionServiceRestClient/getCommissionsReportData/Retry/delay=${reports-service.retry.delay.ms}
com.bancario.reports.client.TransactionServiceRestClient/getCommissionsReportData/Retry/retryOn=${reports-service.retry.retry-on-exceptions}


# ====================================================================
# C. CustomerServiceRestClient (RETRY)
# ====================================================================

# 1. getCustomerById
com.bancario.reports.client.CustomerServiceRestClient/getCustomerById/Retry/maxRetries=${reports-service.retry.max-retries}
com.bancario.reports.client.CustomerServiceRestClient/getCustomerById/Retry/delay=${reports-service.retry.delay.ms}
com.bancario.reports.client.CustomerServiceRestClient/getCustomerById/Retry/retryOn=${reports-service.retry.retry-on-exceptions}


# ====================================================================
# D. CONFIGURACIÓN DE MÉTODOS INTERNOS (TIMEOUT/CB)
# ====================================================================

# 1. getConsolidatedSummary (Orquestación Paralela - NUEVO)
com.bancario.reports.service.impl.ReportsServiceImpl/getConsolidatedSummary/Timeout/value=${reports-service.orchestration-summary.ms}
com.bancario.reports.service.impl.ReportsServiceImpl/getConsolidatedSummary/CircuitBreaker/requestVolumeThreshold=${reports-service.cb.request-volume}
com.bancario.reports.service.impl.ReportsServiceImpl/getConsolidatedSummary/CircuitBreaker/failureRatio=${reports-service.cb.failure-ratio}
com.bancario.reports.service.impl.ReportsServiceImpl/getConsolidatedSummary/CircuitBreaker/delay=${reports-service.cb.delay}
com.bancario.reports.service.impl.ReportsServiceImpl/getConsolidatedSummary/CircuitBreaker/successThreshold=${reports-service.cb.success-threshold}

# 2. getBalancesByCustomer (Consulta Rápida)
com.bancario.reports.service.impl.ReportsServiceImpl/getBalancesByCustomer/Timeout/value=${reports-service.quick-query.ms}
com.bancario.reports.service.impl.ReportsServiceImpl/getBalancesByCustomer/CircuitBreaker/requestVolumeThreshold=${reports-service.cb.request-volume}
com.bancario.reports.service.impl.ReportsServiceImpl/getBalancesByCustomer/CircuitBreaker/failureRatio=${reports-service.cb.failure-ratio}
com.bancario.reports.service.impl.ReportsServiceImpl/getBalancesByCustomer/CircuitBreaker/delay=${reports-service.cb.delay}
com.bancario.reports.service.impl.ReportsServiceImpl/getBalancesByCustomer/CircuitBreaker/successThreshold=${reports-service.cb.success-threshold}

# 3. getTransactionsByAccountId (Consulta Rápida)
com.bancario.reports.service.impl.ReportsServiceImpl/getTransactionsByAccountId/Timeout/value=${reports-service.quick-query.ms}
com.bancario.reports.service.impl.ReportsServiceImpl/getTransactionsByAccountId/CircuitBreaker/requestVolumeThreshold=${reports-service.cb.request-volume}
com.bancario.reports.service.impl.ReportsServiceImpl/getTransactionsByAccountId/CircuitBreaker/failureRatio=${reports-service.cb.failure-ratio}
com.bancario.reports.service.impl.ReportsServiceImpl/getTransactionsByAccountId/CircuitBreaker/delay=${reports-service.cb.delay}
com.bancario.reports.service.impl.ReportsServiceImpl/getTransactionsByAccountId/CircuitBreaker/successThreshold=${reports-service.cb.success-threshold}

# 4. generateCommissionsReport (Reporte Pesado)
com.bancario.reports.service.impl.ReportsServiceImpl/generateCommissionsReport/Timeout/value=${reports-service.heavy-report.ms}
com.bancario.reports.service.impl.ReportsServiceImpl/generateCommissionsReport/CircuitBreaker/requestVolumeThreshold=${reports-service.cb.request-volume}
com.bancario.reports.service.impl.ReportsServiceImpl/generateCommissionsReport/CircuitBreaker/failureRatio=${reports-service.cb.failure-ratio}
com.bancario.reports.service.impl.ReportsServiceImpl/generateCommissionsReport/CircuitBreaker/delay=${reports-service.cb.delay}
com.bancario.reports.service.impl.ReportsServiceImpl/generateCommissionsReport/CircuitBreaker/successThreshold=${reports-service.cb.success-threshold}

# 5. generateDailyAverageBalanceReport (Orquestación Analítica)
com.bancario.reports.service.impl.ReportsServiceImpl/generateDailyAverageBalanceReport/Timeout/value=${reports-service.analytic-orchestration.ms}
com.bancario.reports.service.impl.ReportsServiceImpl/generateDailyAverageBalanceReport/CircuitBreaker/requestVolumeThreshold=${reports-service.cb.request-volume}
com.bancario.reports.service.impl.ReportsServiceImpl/generateDailyAverageBalanceReport/CircuitBreaker/failureRatio=${reports-service.cb.failure-ratio}
com.bancario.reports.service.impl.ReportsServiceImpl/generateDailyAverageBalanceReport/CircuitBreaker/delay=${reports-service.cb.delay}
com.bancario.reports.service.impl.ReportsServiceImpl/generateDailyAverageBalanceReport/CircuitBreaker/successThreshold=${reports-service.cb.success-threshold}